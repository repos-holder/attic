; Written by Artem Falcon <lomka@gero.in>

(define *deck* '())
(define (set-deck!) (set! *deck* (make-deck)))
(define *user-asked-pile* '())
(define (set-user-asked-pile!) 
 (set! *user-asked-pile* (make-empty-avl-tree string<? string=?)))

(define (game)
  (define (loop first second)
    (set! first (call/cc first))
    (set! second (call/cc second))
    (if (and (not (null? computer-pile)) (not (null? user-pile)))
  (loop first second))
 )
 (define (computer-move parent) (let loop() 
  (let read-rank ((arg (assoc (read) user-pile)))
    (if arg (get-rank arg)
      (begin
        (display "not found in pile")(newline)
        (read-rank (assoc (read) user-pile))
      )
  ))
  (set! parent (call/cc parent))(loop)))
 (define (player-move parent) (let loop() 
  ;
  (set! parent (call/cc parent))(loop)))

 (set-deck!)
 (set-user-asked-pile!)
 (define computer-score 0)
 (define user-score 0)
 (let ((piles (init-piles (lambda (x) (append x (pop))) (lambda (x) (append x (pop)))
  )))
  (set! computer-pile (car piles))
  (set! user-pile (cdr piles))
 )
 (ndisplay "your pile is:" (sort-pile user-pile))
 (let ((who (who-starts?)))
  (ndisplay who "starts first")
  (if (eq? who 'computer)
   (loop computer-move player-move)
   (loop player-move computer-move))
 )
 ;(print-winner computer-score user-score)
;(game)
)
